{"version":3,"file":"tag-input-form.component.js","sourceRoot":"","sources":["tag-input-form.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    Component,\n    Input,\n    Output,\n    EventEmitter,\n    Renderer,\n    ViewChild\n} from '@angular/core';\n\nimport {\n    FormGroup,\n    FormControl,\n    Validators,\n    ValidatorFn,\n    AbstractControl\n} from '@angular/forms';\n\n@Component({\n    selector: 'tag-input-form',\n    styleUrls: [ './tag-input-form.style.scss' ],\n    templateUrl: './tag-input-form.template.html'\n})\nexport class TagInputForm {\n    /**\n     * @name onSubmit\n     * @type {EventEmitter}\n     */\n    @Output() public onSubmit: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * @name onBlur\n     * @type {EventEmitter}\n     */\n    @Output() public onBlur: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * @name onFocus\n     * @type {EventEmitter}\n     */\n    @Output() public onFocus: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * @name onKeyup\n     * @type {EventEmitter}\n     */\n    @Output() public onKeyup: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * @name onKeydown\n     * @type {EventEmitter}\n     */\n    @Output() public onKeydown: EventEmitter<any> = new EventEmitter();\n\n    // inputs\n\n    /**\n     * @name placeholder\n     * @type {string}\n     */\n    @Input() public placeholder: string;\n\n    /**\n     * @name validators\n     * @type {ValidatorFn[]}\n     */\n    @Input() public validators: ValidatorFn[] = [];\n\n    /**\n     * @name inputId\n     * @type {string}\n     */\n    @Input() public inputId: string;\n\n    /**\n     * @name inputClass\n     * @type {string}\n     */\n    @Input() public inputClass: string;\n\n    /**\n     * @name input\n     */\n    @ViewChild('input') public input;\n\n    /**\n     * @name form\n     */\n    public form: FormGroup;\n\n    constructor(private renderer: Renderer) {}\n\n    public ngOnInit() {\n        // creating form\n        this.form = new FormGroup({\n            item: new FormControl('', Validators.compose(this.validators))\n        });\n    }\n\n\t/**\n     * @name value\n     * @returns {AbstractControl}\n     */\n    public get value(): AbstractControl {\n        return this.form.get('item');\n    }\n\n\t/**\n     * @name isInputFocused\n     * @returns {boolean}\n     */\n    public isInputFocused(): boolean {\n        return document.activeElement === this.input.nativeElement;\n    }\n\n\t/**\n     * @name getErrorMessages\n     * @param messages\n     * @returns {string[]}\n     */\n    public getErrorMessages(messages): string[] {\n        return Object.keys(messages)\n            .filter(err => this.value.hasError(err))\n            .map(err => messages[ err ]);\n    }\n\n    /**\n     * @name hasErrors\n     * @returns {boolean}\n     */\n    public hasErrors(): boolean {\n        return this.form.dirty && this.form.value.item && this.form.invalid;\n    }\n\n\t/**\n     * @name focus\n     */\n    public focus(): void {\n        this.renderer.invokeElementMethod(this.input.nativeElement, 'focus');\n    }\n\n    /**\n     * @name blur\n     */\n    public blur(): void {\n        this.renderer.invokeElementMethod(this.input.nativeElement, 'blur');\n    }\n\n\t/**\n     * @name getElementPosition\n     * @returns {ClientRect}\n     */\n    public getElementPosition(): ClientRect {\n        return this.input.nativeElement.getBoundingClientRect();\n    }\n\n    /**\n     * - removes input from the component\n     * @name destroy\n     */\n    public destroy(): void {\n        const input = this.input.nativeElement;\n        input.parentElement.removeChild(input);\n    }\n\n    /**\n     * @name onKeyDown\n     * @param $event\n     */\n    public onKeyDown($event) {\n        return this.onKeydown.emit($event);\n    }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}